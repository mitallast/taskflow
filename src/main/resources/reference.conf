
operation {
  dummy {
    reference {
      status: "success"
    }
    schema: [
      {
        field: status
        label: "Operation status"
        type: select
        options: [
          "success",
          "failed"
        ]
      }
    ]
  }

  shell {
    reference {
      directory = ""
      command = "true"
      args = []
      timeout = "1m"
      // charset = "CP866" for windows
      charset = "UTF-8"
    }
    schema: [
      {
        field: directory
        label: "Working directory"
        type: text
      }
      {
        field: command
        label: "Command"
        type: text
      }
      {
        field: args
        label: "Command args"
        type: json
      }
      {
        field: timeout
        label: "Timeout"
        type: text
      }
      {
        field: charset
        label: "Charset"
        type: text
      }
    ]
  }

  aws {
    s3 {
      monitor {
        reference {
          region: ${aws.region}
          bucket: "default"
          prefix: "/test.txt"
          await: 10m
        }
        schema: [
          {
            field: region
            label: "Region"
            type: text
          }
          {
            field: bucket
            label: "Bucket"
            type: text
          }
          {
            field: prefix
            label: "Prefix"
            type: text
          }
          {
            field: await
            label: "Await"
            type: text
          }
        ]
      }
    }
  }

  docker {
    container {
      create {
        reference {
          image: ""
          name: ""
          labels {}
        }
        schema: [
          {
            field: image
            label: "Image id"
            type: text
          }
          {
            field: name
            label: "Container name"
            type: text
          }
          {
            field: labels
            label: "Container labels"
            type: json
          }
        ]
      }
      start {
        reference {
          filters {}
        }
        schema: [
          {
            field: filters
            label: "Container filters"
            type: json
          }
        ]
      }
      stop {
        reference {
          filters {}
        }
        schema: [
          {
            field: filters
            label: "Container filters"
            type: json
          }
        ]
      }
      kill {
        reference {
          filters {}
        }
        schema: [
          {
            field: filters
            label: "Container filters"
            type: json
          }
        ]
      }
      remove {
        reference {
          filters {}
          removeVolumes: false
          force: false
        }
        schema: [
          {
            field: filters
            label: "Container filters"
            type: json
          }
          {
            field: removeVolumes
            label: "Remove volumes"
            type: boolean
          }
          {
            field: force
            label: "Force"
            type: boolean
          }
        ]
      }
    }
  }
}

persistence {
  url = "jdbc:postgresql://localhost:5432/taskflow"
  url = ${?DB_URL}
  username = "mitallast"
  username = ${?DB_USER}
  password = ""
  password = ${?DB_PASSWORD}
  cleanup = false
  cleanup = ${?DB_CLEANUP}
  await = 10m
  properties {
  }
}

rest {
  host = 0.0.0.0
  port = 8080
  connect_timeout = 30s
  max_content_length = 1048576
  threads = 4
  backlog = 1024
  reuse_address = true
  keep_alive = true
  tcp_no_delay = false
  snd_buf = 65536
  rcv_buf = 65536
}

aws {
  region = ""
  region = ${?AWS_DEFAULT_REGION}

  access_key_id = ""
  secret_key = ""
  session_token = ""
}

docker {
  api.version = "1.25"
}